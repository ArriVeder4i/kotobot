import telebot
from telebot import types
import random
from openai import OpenAI
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞)
USER_DATA = {}
STATES = {
    'awaiting_birth_date': 'date',
    'awaiting_birth_time': 'time',
    'awaiting_birth_place': 'place',
    'awaiting_question': 'question'
}

# API-–∫–ª—é—á OpenRouter
OPENROUTER_API_KEY = "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"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_markup():
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–æ–¥—É‚ô£', callback_data='question')
    btn2 = types.InlineKeyboardButton('–û—Ç–Ω–æ—à–µ–Ω–∏—è‚ù§', callback_data='relations')
    btn3 = types.InlineKeyboardButton('–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å‚ô¶', callback_data='compatibility')
    btn4 = types.InlineKeyboardButton('–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è‚ô†', callback_data='today')
    btn5 = types.InlineKeyboardButton('–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', callback_data='natal_chart')
    markup.row(btn1, btn2)
    markup.row(btn3, btn4)

    markup.row(btn5)
    return markup


# –°–ø–∏—Å–æ–∫ –°—Ç–∞—Ä—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤ (–¥–æ–±–∞–≤—å –ø—É—Ç–∏ –∫ GIF-—Ñ–∞–π–ª–∞–º –≤—Ä—É—á–Ω—É—é)
major_arcana = [
    {'name': '–®—É—Ç', 'image_path': 'oldark/shut.gif'},  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ GIF
    {'name': '–ú–∞–≥', 'image_path': 'oldark/mag.gif'},
    {'name': '–ñ—Ä–∏—Ü–∞', 'image_path': 'oldark/zhritsa.gif'},
    {'name': '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', 'image_path': 'oldark/imperatritsa.gif'},
    {'name': '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä', 'image_path': 'oldark/imperator.gif'},
    {'name': '–í–µ—Ä—Ö–æ–≤–Ω—ã–π –∂—Ä–µ—Ü', 'image_path': 'oldark/zhets.gif'},
    {'name': '–í–ª—é–±–ª–µ–Ω–Ω—ã–µ', 'image_path': 'oldark/vlulennie.gif'},
    {'name': '–ö–æ–ª–µ—Å–Ω–∏—Ü–∞', 'image_path': 'oldark/kolesnitsa.gif'},
    {'name': '–°–∏–ª–∞', 'image_path': 'oldark/sila.gif'},
    {'name': '–û—Ç—à–µ–ª—å–Ω–∏–∫', 'image_path': 'oldark/otshelnik.gif'},
    {'name': '–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', 'image_path': 'oldark/koleso fortuni.gif'},
    {'name': '–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', 'image_path': 'oldark/pravosudie.gif'},
    {'name': '–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π', 'image_path': 'oldark/poveshenniy.gif'},
    {'name': '–°–º–µ—Ä—Ç—å', 'image_path': 'oldark/smert.gif'},
    {'name': '–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', 'image_path': 'oldark/vozderzhanie.gif'},
    {'name': '–î—å—è–≤–æ–ª', 'image_path': 'oldark/diavol.gif'},
    {'name': '–ë–∞—à–Ω—è', 'image_path': 'oldark/bashnia.gif'},
    {'name': '–ó–≤–µ–∑–¥–∞', 'image_path': 'oldark/zvezda.gif'},
    {'name': '–õ—É–Ω–∞', 'image_path': 'oldark/luna.gif'},
    {'name': '–°–æ–ª–Ω—Ü–µ', 'image_path': 'oldark/solntse.gif'},
    {'name': '–°—É–¥', 'image_path': 'oldark/sud.gif'},
    {'name': '–ú–∏—Ä', 'image_path': 'oldark/mir.gif'},
]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)
def split_long_message(text, max_length=4096):
    if len(text) <= max_length:
        return [text]
    parts = []
    while len(text) > max_length:
        split_point = text.rfind('\n', 0, max_length)
        if split_point == -1:
            split_point = max_length
        parts.append(text[:split_point])
        text = text[split_point:].lstrip()
    if text:
        parts.append(text)
    return parts


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
def edit_response(text):
    if text:
        # –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ ‚ú®
        text = text.replace("*", "‚ú®")
        text = text.replace("#", "üåô")
        text = text.replace("---", "üåïüåñüåóüåòüåëüåíüåìüåîüåô")
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
def get_openrouter_interpretation(query, card_names, context):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if context == "–Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã":
            prompt = f"–°–æ—Å—Ç–∞–≤—å –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {query['date']}, –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è - {query['time']}, –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è - {query['place']}. –í–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏, –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä—ã –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç 3000 —Å–∏–º–≤–æ–ª–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –¥–æ–±–∞–≤—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥."
        else:
            # –î–ª—è –∫–∞—Ä—Ç –¢–∞—Ä–æ
            if query:
                cards_string = ", ".join(card_names) if card_names else ""
                prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å: '{query}'. –î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è {context} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞—Ä–æ-–∫–∞—Ä—Ç—ã: {cards_string}. –í–∫–ª—é—á–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä—ã –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç 3000 —Å–∏–º–≤–æ–ª–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–æ –∏ –¥–æ–±–∞–≤—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥."
            else:
                cards_string = ", ".join(card_names)
                prompt = f"–î–∞–π –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è {context} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∞—Ä–æ-–∫–∞—Ä—Ç: {cards_string}. –í–∫–ª—é—á–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è –ª—é–±–≤–∏, –∫–∞—Ä—å–µ—Ä—ã –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç 3000 —Å–∏–º–≤–æ–ª–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞—Ä–æ –∏ –¥–æ–±–∞–≤—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥."

        response = client.chat.completions.create(
            model="deepseek/deepseek-r1:free",
            messages=[
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            max_tokens=1000,
            temperature=0.7
        )
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        return edit_response(response.choices[0].message.content if response.choices and response.choices[
            0].message.content else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.")
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {str(e)}"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    try:
        bot.send_photo(message.chat.id, photo=open('mystical_cat_tarot_reader.jpg', 'rb'))
    except FileNotFoundError:
        bot.send_message(message.chat.id,
                         "–ò–∑–≤–∏–Ω–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞-—Ç–∞—Ä–æ–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    welcome_text = "üêæ –ú—è—É-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∏—Å–∫–∞—Ç–µ–ª—å —Ç–∞–π–Ω! üßô‚Äç‚ôÇÔ∏è‚ú® –Ø –ö–æ—Ç-–±–æ—Ç –¢–∞—Ä–æ–ª–æ–≥, –∏ –º–æ–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–∞–ø–∫–∏ –≥–æ—Ç–æ–≤—ã —Ä–∞–∑–ª–æ–∂–∏—Ç—å –∫–∞—Ä—Ç—ã —Å—É–¥—å–±—ã. üîÆ –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —à–µ–ø—á–µ—Ç —Ç–µ–±–µ –í—Å–µ–ª–µ–Ω–Ω–∞—è? –ü–æ—Ç—è–Ω–∏ –ª–∞–ø–∫—É –∑–∞ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π, –∏ —Ç–∞–π–Ω—ã –æ—Ç–∫—Ä–æ—é—Ç—Å—è! üò∫‚ú®\n\n–í–æ—Ç —Ç–≤–æ–π –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Ç-—Ç–∞—Ä–æ–ª–æ–≥! üîÆüê±‚ú® –ü—É—Å—Ç—å –º–∞–≥–∏—è –∫–∞—Ä—Ç –ø—Ä–∏–≤–µ–¥—ë—Ç —Ç–µ–±—è –∫ –æ—Ç–≤–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—â–µ—à—å!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –∫–æ–ª–æ–¥–µ
    if chat_id in USER_DATA and USER_DATA[chat_id].get('state') == 'awaiting_question':
        USER_DATA[chat_id]['question'] = text
        card = random.choice(major_arcana)
        bot.send_message(chat_id, f'–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card["name"]}')
        try:
            bot.send_animation(chat_id, animation=open(card['image_path'], 'rb'))
            bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –∑–≤—ë–∑–¥–∞–º–∏üí´ü™ê")
            interpretation = get_openrouter_interpretation(text, [card['name']], "–≤–æ–ø—Ä–æ—Å–∞ –∫ –∫–æ–ª–æ–¥–µ")
            for part in split_long_message(interpretation):
                bot.send_message(chat_id, part)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:', reply_markup=create_markup())
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}")
        del USER_DATA[chat_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    if chat_id in USER_DATA:
        state = USER_DATA[chat_id].get('state')
        if state == 'awaiting_birth_date':
            USER_DATA[chat_id]['date'] = text
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30 –∏–ª–∏ 2:30 PM):")
            USER_DATA[chat_id]['state'] = 'awaiting_birth_time'
        elif state == 'awaiting_birth_time':
            USER_DATA[chat_id]['time'] = text
            bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è):")
            USER_DATA[chat_id]['state'] = 'awaiting_birth_place'
        elif state == 'awaiting_birth_place':
            USER_DATA[chat_id]['place'] = text
            try:
                bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –∑–≤—ë–∑–¥–∞–º–∏üí´ü™ê")
                interpretation = get_openrouter_interpretation(USER_DATA[chat_id], [], "–Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
                for part in split_long_message(interpretation):
                    bot.send_message(chat_id, part)
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:', reply_markup=create_markup())
            except Exception as e:
                bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã: {str(e)}")
            del USER_DATA[chat_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=create_markup())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
    bot.answer_callback_query(call.id)

    if call.data == 'question':
        bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –∫–æ–ª–æ–¥—ã?")
        USER_DATA[chat_id] = {'state': 'awaiting_question'}
    elif call.data == 'relations':
        cards = random.sample(major_arcana, 3)
        card_names = [card['name'] for card in cards]
        bot.send_message(chat_id, f'–ö–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è: {", ".join(card_names)}')
        try:
            for card in cards:
                bot.send_animation(chat_id, animation=open(card['image_path'], 'rb'))
            bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –∑–≤—ë–∑–¥–∞–º–∏üí´ü™ê")
            interpretation = get_openrouter_interpretation(None, card_names, "—Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")
            for part in split_long_message(interpretation):
                bot.send_message(chat_id, part)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:', reply_markup=create_markup())
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}")
    elif call.data == 'compatibility':
        cards = random.sample(major_arcana, 3)
        card_names = [card['name'] for card in cards]
        bot.send_message(chat_id, f'–ö–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {", ".join(card_names)}')
        try:
            for card in cards:
                bot.send_animation(chat_id, animation=open(card['image_path'], 'rb'))
            bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –∑–≤—ë–∑–¥–∞–º–∏üí´ü™ê")
            interpretation = get_openrouter_interpretation(None, card_names, "—Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
            for part in split_long_message(interpretation):
                bot.send_message(chat_id, part)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:', reply_markup=create_markup())
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}")
    elif call.data == 'today':
        card = random.choice(major_arcana)
        bot.send_message(chat_id, f'–ö–∞—Ä—Ç–∞ –¥–Ω—è: {card["name"]}')
        try:
            bot.send_animation(chat_id, animation=open(card['image_path'], 'rb'))
            bot.send_message(chat_id, "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å–æ –∑–≤—ë–∑–¥–∞–º–∏üí´ü™ê")
            interpretation = get_openrouter_interpretation(None, [card['name']], "—Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            for part in split_long_message(interpretation):
                bot.send_message(chat_id, part)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ–ø—Ü–∏—é:', reply_markup=create_markup())
        except FileNotFoundError:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É!")
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}")
    elif call.data == 'natal_chart':
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990):")
        USER_DATA[chat_id] = {'state': 'awaiting_birth_date'}


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)
